#!/usr/bin/env node

const nodemailer = require('nodemailer');
const Airtable = require('airtable');
require('env2')('config.env');
const {
  mentorEmailTemplate,
  userEmailTemplate
} = require('../server/emails/reminder_emails');
const { isAppointmentTomorrow } = require('../server/emails/helpers');

// connect to admin Airtable

const adminBase = new Airtable({ apiKey: process.env.AIRTABLE_API }).base(
  process.env.AIRTABLE_ADMIN_BASE
);

//set up nodemailer connection

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'hellointerakt@gmail.com',
    pass: process.env.PASSWORD
  }
});

// first get all appointments in the DB, then call getMentorDetails

const getAllAppointmentsTomorrow = () => {
  let allAppointmentsTomorrow = [];
  return adminBase('appointments')
    .select({
      fields: [
        'user_id',
        'mentor_id',
        'date_and_time',
        'topics',
        'chat_string',
        'date'
      ]
    })
    .all()
    .then(records => {
      records.forEach(record => {
        const fullDate = new Date(record.fields.date_and_time);
        if (isAppointmentTomorrow(fullDate))
          allAppointmentsTomorrow.push(record.fields);
      });
      return allAppointmentsTomorrow;
    })
    .catch(console.log);
};

// get mentor email and add to appt object, then call getUserDetails

const getMentorEmails = async allAppointmentsTomorrow => {
  return await Promise.all(
    allAppointmentsTomorrow.map(appt => {
      const mentorId = appt.mentor_id[0];
      return adminBase('mentors')
        .find(mentorId)
        .then(record => {
          appt.mentor_email = record.fields.email;
          return appt;
        });
    })
  ).catch(console.log);
};

// gets user details (email and name) and adds to appt object, then calls sendMentorAndUserEmails

const getUserDetails = async allAppointmentsTomorrow => {
  return await Promise.all(
    allAppointmentsTomorrow.map(appt => {
      const userId = appt.user_id[0];
      return adminBase('users')
        .find(userId)
        .then(record => {
          appt.user_name = record.fields.name;
          appt.user_email = record.fields.email;
          delete appt.user_id;
          delete appt.mentor_id;
          delete appt.date_and_time;
          return appt;
        });
    })
  ).catch(err => console.log(err));
};

// sends reminder emails to every user and mentor with an appointment tomorrow

const sendMentorAndUserEmails = () => {
  const mentorReminderEmail = ({ appt }) => {
    const mentorEmail = {
      from: 'hellointerakt@gmail.com',
      to: `${appt.mentor_email}`,
      subject: 'Reminder: AKT online mentoring appointment',
      html: mentorEmailTemplate(appt)
    };

    transporter.sendMail(mentorEmail, function(error, info) {
      if (error) {
        throw error;
      } else {
        console.log('Email sent: ' + info.response);
      }
    });
  };

  const userReminderEmail = ({ appt }) => {
    const userEmail = {
      from: 'hellointerakt@gmail.com',
      to: `${appt.user_email}`,
      subject: 'Reminder: AKT online mentoring appointment',
      html: userEmailTemplate(appt)
    };

    transporter.sendMail(userEmail, function(error, info) {
      if (error) {
        throw error;
      } else {
        console.log('Email sent: ' + info.response);
      }
    });
  };

  getAllAppointmentsTomorrow()
    .then(getMentorEmails)
    .then(getUserDetails)
    .then(appts => {
      appts.forEach(appt => {
        mentorReminderEmail({ appt });
        userReminderEmail({ appt });
      });
    })
    .catch(console.log);
};

sendMentorAndUserEmails();
